// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./schema.dbml"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String
  role          String   @default("MEMBER")
  isFirstLogin  Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  photo         String?

  Routes  Routes[]
  Vehicle Vehicle[]
}

model Vehicle {
  id            Int    @id @default(autoincrement())
  name          String
  signSerial    String @unique
  responsible   User   @relation(fields: [responsibleId], references: [id])
  responsibleId String
  type          String

  Routes Routes[]
}

model Routes {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  geofencinginfos String
  startAddress    String
  finishAddress   String
  creatorid       String
  vehicle         Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId       Int
  user            User    @relation(fields: [userId], references: [id])
  userId          String
  status          String @default("WAITING")

  Alerts Alerts[]
}

model Alerts {
  id       Int    @id @default(autoincrement())
  location String
  route    Routes @relation(fields: [routeId], references: [id])
  routeId  Int
}
